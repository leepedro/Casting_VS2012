Source: 'Type Conversions and Type Safety' in MSDN.
http://msdn.microsoft.com/en-us/library/hh279667.aspx

1. Implicit type conversions
Compilers are capable of some conversions.
Some conversions are completely safe, while some conversions are risky.
Compilers do not throw warnings on safe conversions. (Good)
Compilers throw warnings on some risky conversions (Okay) while they do NOT throw warnings on
some risky conversions (BAD!).

1-1. Widening conversions (promotion) (identical signed type only) 
Widening conversions are safe, so NO action is required.
common) (src == signed) == (dst == signed)
a) src == integral && src != long long && dst == double
 dst must be double instead of float.
 For example, int to float is NOT safe.
b) src == bool || src == char
 dst could be any built-in types.
c) src == integral && dst == integral && sizeof(srcT) <= sizeof(dstT)
d) src == float && dst == double
 or src == floating && dst == floating && sizeof(srcT) <= sizeof(dstT)

1-2. Narrowing conversions (coercion) (identical signed type only)
Compilers always throw warnings for possible loss of data (Okay).
-> Do run-time check for overflow, underflow, range error.
-> If so, throw underflow, overflow, range errors.
-> If not, silence the compiler warnings by calling static_cast<T>.
-> Implement this as SafeCast<dstT>(src) as it is not really a converting but a casting.

a) src == integral && dst == integral && ((src == signed) == (dst == signed)) && sizeof(srcT) > sizeof(dstT)
 if src < static_cast<srcT>(dstT::min)
  throw underflow_error
 else if src > static_cast<srcT>(dstT::max)
  throw overflow_error
 else
  return static_cast<dstT>(src)

b) src == double && dst == float
 if src > static_cast<double>(float::max) || src < -static_cast<double>(float::max)
  throw range_error
 else
  return static_cast<dstT>(src)

1-3. Signed-unsigned conversions (integral with identical data width only)
The data value in the variable is not actually being changed but interpreted differently
depending on the declared data type.
Compilers do NOT warn this risk (BAD! BAD! BAD!).
-> Do run-time check if src is within the range of dstT.
-> If so, convert it implicitly.
-> If not, throw underflow, overflow, range errors.
-> Implement this as SafeConvert<dstT>(src) as it is not a casting but a conversion.

common) src == integral && dst == integral && sizeof(srcT) == sizeof(dstT)
a) src == signed && dst == unsigned
 if src < 0
  throw a runtime_error or an underflow_error.
   (This is an underflow without actually underflowing.)
 else
  return src

b) src == unsigned && dst == signed
 if src > static_cast<srcT>(dstT::max)
  throw a runtime_error or an overflow_error.
   (This is an overflow without actually overflowing.)
 else
  return src

NOTE: The conversions not directly supported by this method can still be done by
automatically going through implicit conversion.
For example, unsigned int -> short can be automatically implemented as unsigned int -> int ->
short because unsigned int to int is an implicit conversion.

2. Explicit type conversions (casting)
Compilers always throw warnings for possible loss of data (Okay).

2-1. src == double && dst == signed integral
-> Do run-time check if src is within the range of dstT.
-> If so, throw underflow, overflow error.
-> If not, silence the compiler warnings by calling static_cast<T>.
-> Implement this as SafeCast<dstT>(src).
 if src < static_cast<srcT>(dstT::min)
  throw underflow_error
 else if src > static_cast<srcT>(dstT::max)
  throw overflow_error
 else
  return static_cast<dstT>(src)

NOTE: float -> int can be automatically implemented as float -> double -> int because float
to double is an implicit conversion.
NOTE: This cut off (floor) source value.
NOTE: RoundAs<dstT>(src) can be implemented as SafeCast<dstT>(round(src))
 